#include <bits/stdc++.h>
#include <sstream>
using namespace std;
pair <int,int> v;
vector< pair<int,int> > vpair;
vector<int> dfs_num (10001);
vector <  vector< pair<int,int> > > adj(10001);
vector <int> dist(8);
int ts,tasks,t1,t2,w;


void bellman()
{
dist.as(tasks, INT_MAX); dist[s] = 0;

for (int i = 0; i < tasks - 1; i++)
// relax all E edges V-1 times
for (int u = 0; u < tasks; u++)
for (int j = 0; j < (int)adj[u].size(); j++) {
v = adj[u][j];
// record SP spanning here if needed
dist[v.first] = min(dist[v.first], dist[u] + v.second);
// relax
}
}




int main()
{
    freopen("in.in","r",stdin);
   int k=0;
    cin>>tasks;
    cin>>ts;
    cin.ignore();
        while(ts--)
        {
        string s;
            getline(cin,s);
            int l=s.length();
            t1=(int)(s[5]-'0');
            t2=(int)(s[l-1]-'0');
            if(s[14]=='a'){
                int i=23;
                string s1;
                while(s[i]!=' '){
                s1+=s[i];
                i++;
                }
                istringstream (s1) >> w;
                w=w*-1;
            }
            else if(s[14]=='w'){
                int i=21;
                w=0;
                string s1;
                while(s[i]!=' '){
                s1+=s[i];
                i++;
                }
                istringstream (s1) >> w;
                int aux=t1;
                t1=t2;
                t2=aux;
                }
                adj[t1].push_back(make_pair(t2,w));
                t1=0;t2=0;





}
    bellman();

    for(int i=1;i<=tasks;i++){
                cout<<dist[i]<<endl;

        }
    return 0;
}
